{"version":3,"sources":["static/lizard.svg","static/upload.svg","static/download.svg","static/trash.svg","FileManager.js","ConfirmDeleteButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","deleteFile","endpoint","file","axios","get","id","ConfirmDeleteButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","toggle","bind","assertThisInitialized","setState","prevState","_this2","react_default","a","createElement","Fragment","Button","className","onClick","src","trash","alt","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","color","deleteAndToggle","React","Component","App","production_url","files","uploadingFile","name","then","res","data","map","filename","_id","updateFileState","e","target","fileList","_this3","key","ListGroupItem","action","type","url","method","responseType","window","URL","createObjectURL","Blob","link","document","href","setAttribute","body","appendChild","click","downloadFile","download","src_ConfirmDeleteButton","_this4","logo","ListGroup","generateList","encType","onSubmit","form","formData","FormData","append","post","headers","content-type","uploadFile","onChange","upload","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f9d618d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lizard.d56c869e.svg\";","module.exports = __webpack_public_path__ + \"static/media/upload.893e3b65.svg\";","module.exports = __webpack_public_path__ + \"static/media/download.b3aa4b4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/trash.5bd80917.svg\";","import axios from 'axios';\r\n\r\nexport function downloadFile(endpoint, file) {\r\n    axios({\r\n      url: endpoint+'/download?id='+file.id,\r\n      method: 'GET',\r\n      responseType: 'blob',\r\n    }).then((res) => {\r\n      const url = window.URL.createObjectURL(new Blob([res.data]));\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', file.name);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n    });\r\n}\r\n\r\nexport function uploadFile(endpoint, form) {\r\n    const url = endpoint+'/upload';\r\n    const formData = new FormData();\r\n    formData.append('uploadingfile', form.file)\r\n    formData.append('name', form.name)\r\n    const config = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data'\r\n        }\r\n    }\r\n    axios.post(url, formData, config)\r\n}\r\n\r\nexport function deleteFile(endpoint, file) {\r\n    axios.get(endpoint+'/delete?id='+file.id)\r\n}","import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport trash from './static/trash.svg';\r\n\r\nclass ConfirmDeleteButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      endpoint: props.endpoint,\r\n      modal: false,\r\n      file: props.file,\r\n    };\r\n    this.toggle = this.toggle.bind(this);\r\n    this.deleteFile = props.deleteFile;\r\n  }\r\n\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n  }\r\n\r\n  deleteAndToggle(file) {\r\n    this.toggle()\r\n    this.deleteFile(this.state.endpoint, file)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Button className='deleteBtn' onClick={this.toggle}>\r\n          <img className='deleteIcon' src={trash} alt='delete icon'/>\r\n        </Button>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n          <ModalHeader toggle={this.toggle}>Confirm Delete</ModalHeader>\r\n          <ModalBody>\r\n            Do you want to remove this file?\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"danger\" onClick={()=>this.deleteAndToggle(this.state.file)}>Delete</Button>{' '}\r\n            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ConfirmDeleteButton;","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { Button, ListGroup, ListGroupItem } from 'reactstrap';\nimport logo from './static/lizard.svg';\nimport upload from './static/upload.svg';\nimport download  from './static/download.svg';\n\nimport {downloadFile, uploadFile, deleteFile} from './FileManager.js'\nimport ConfirmDeleteButton from './ConfirmDeleteButton.js'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.production_url = 'https://lizard-storage-backend.herokuapp.com'\n    this.state = {\n      files: [],\n    }\n    this.uploadingFile = {\n      file: null,\n      name: '',\n    }\n  }\n  \n  updateFileState() {\n    axios.get(this.production_url+'/showall').then((res) => {\n      this.setState({files: res.data.map(\n        (file)=> ({\n          \"name\":file.filename,\n          \"id\":file._id\n          })\n        )\n      })\n    })\n  }\n\n  componentDidMount() {\n    this.updateFileState()   \n  }\n\n  componentDidUpdate() {\n    this.updateFileState()\n  }\n\n  onChange(e) {\n    if(e.target.files[0])\n      this.uploadingFile = {file: e.target.files[0], name:e.target.files[0].name}\n  }\n\n  generateList(fileList) {\n    return (\n        fileList.map((file)=>\n        <div key={file.id} className='d-flex'>\n          <ListGroupItem action className='fileitem'>\n            {file.name}\n            <Button className='downloadBtn' type='submit' onClick={()=>downloadFile(this.production_url, file)}>\n              <img className='downloadIcon' src={download} alt='download icon'/>\n            </Button>\n            <ConfirmDeleteButton id={file.id} endpoint={this.production_url} file={file} deleteFile={deleteFile}/>\n          </ListGroupItem>\n        </div>)\n    )\n  }\n\n  render() {\n    return(\n      <div className='App'>\n        <div className='Header'>\n          <img id='lizard-logo' src={logo} alt='logo' />\n          <p id='project-name'>LIZARD STORAGE PROJECT</p>  \n        </div>\n\n        <div className='FileDisplay'>\n          <ListGroup id=\"filelist\">\n            {this.generateList(this.state.files)}\n          </ListGroup>\n        </div>\n\n        <div className='UploadForm'>\n          <form encType='multipart/form-data' onSubmit={()=>uploadFile(this.production_url, this.uploadingFile)}>\n            <input className='selectFile' type='file' name='uploadingfile' onChange={(e)=>this.onChange(e)}/>\n            <input className='uploadBtn' src={upload} type='image' alt='upload icon' />\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}